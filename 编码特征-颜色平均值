import cv2
import numpy as np
from matplotlib import pyplot as plt
image_bgr = cv2.imread('zxc.jpg', cv2.IMREAD_COLOR_BGR)
image_Bgr = cv2.imread('zxc.jpg') # 默认就是读取为BGR格式的
# if image_bgr == image_Bgr:
#     print('相等') #
channels = cv2.mean(image_bgr) # 因为bgr格式的图像只有三个通道，没有Alpha（透明度）通道，所以返回的参数4（Alpha）为0
print(channels)
observation = np.array([(channels[2],channels[1],channels[0])])
plt.imshow(observation)
plt.axis('off')
plt.show()
list1 = [1,2,3,4,5,6,7,8,9,10]
list1 = np.array(list1)
sum = 0
for i in range(len(list1)):
    sum += list1[i]
# print(sum/len(list1))
mean = cv2.mean(list1)
# (meanVal_Channel1, meanVal_Channel2, meanVal_Channel3, meanVal_Channel4)
print(mean)
'''
cv2.rectangle(img, pt1, pt2, color, thickness, lineType, shift)
img：要绘制矩形的图像，类型为 cv2.Mat 或 numpy.ndarray。在这个场景中，它是掩码图像。
pt1：矩形的左上角坐标，类型为元组 (x, y)。
pt2：矩形的右下角坐标，类型为元组 (x, y)。
color：矩形边框的颜色，或者填充的颜色。对于灰度图像，通常使用 255 表示白色。
thickness：矩形边框的粗细。如果为正数，表示边框的像素宽度；如果为负数（如 -1），表示矩形将被填充。
lineType（可选）：线条的类型，如 cv2.LINE_4、cv2.LINE_8（默认）或 cv2.LINE_AA。
shift（可选）：坐标点的小数点位移数。
'''
mask = cv2.rectangle(image_bgr, (50,50), (100,100), 255, cv2.LINE_4, -1)
plt.imshow(mask)
plt.axis('off')
plt.show()
'''
.reshape(-1,1)：
    -1：表示该维度大小由Numpy自动计算
     1：表示第二个维度固定为1
'''

'''
维度不同： 第一个是1维，第二个是2维。
用途不同： 第一个通常用于表示一组数据，第二个通常用于矩阵运算。
兼容性不同： 在某些情况下，例如矩阵乘法，(10, 1) 的形状可能与 (1, 10) 或其他形状的数组更兼容。

元素总数必须一致：例如 10 个元素的一维数组不能 reshape(3, 3)（需要 9 个元素）。
常见用途：
将一维数据转换为列向量（用于机器学习输入）。
适配 OpenCV 等库的函数接口（如 cv2.mean）。
'''
# 创建一个一维数组
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# a.reshape(3,3) # 会报错
print("a的形状:", a.shape)  # 输出: (10,) 表示一维数组（扁平数组）
print(a)
# 将一维数组转换为二维数组
b = a.reshape(10, 1)
print("b的形状:", b.shape)  # 输出: (10, 1) 表示二维数组，其中第一维为10，第二维为1(列向量)
print(b)
'''
BGRA：
    (meanVal_Channel1, meanVal_Channel2, meanVal_Channel3, meanVal_Channel4)
    meanVal_Channel1:BGRA通道中的B通道
    meanVal_Channel2:BGRA通道中的G通道
    meanVal_Channel3:BGRA通道中的R通道
    meanVal_Channel4:BGRA通道中的A通道（透明度 （0=完全透明，255=完全不透明））
    
'''
